########################################################################################################################
# Project specific settings
########################################################################################################################


[buildout]
versions = versions
develop =
        ${buildout:directory}/src.mrdeveloper/zopelib
sources-dir=${buildout:directory}/src.mrdeveloper
find-links =
    http://dist.plone.org/release/4.2
    http://pypi.python.org/simple/ZODB4
# FOR PILWTOK
    http://download.zope.org/distribution/
# project packages
eggs=mars
    PIL
zcml=
   mars.policy
# eea.geotags
# deactivated as it interfers with csvreplicata
#    eea.geotags.default
#    eea.geotags.default
    eea.facetednavigation-overrides
# extra directories oto add to the python path
extra-paths=

# see http://pypi.python.org/pypi/mr.developer for documentation
sources = sources
# auto tracked developement products, see project/sources.cfg
[sources]


# here is defined the Zope instance running your plone site
# beware that zopepy part must run before isntance in order to have the right version
# pinned for relstorage
[instance]
recipe = plone.recipe.zope2instance
http-address = ${hosts:instance}:${ports:instance}
user = ${zope:user}:${zope:password}
session-timeout-minutes = ${cache:session-timeout-minutes}
verbose-security = ${zope:verbose-security}
debug-mode = ${zope:debug-mode}
event-log-level = ${zope:event-log-level}
z2-log-level = ${zope:z2-log-level}
webdav-address = ${hosts:webdav}:${ports:webdav}
zodb-cache-size = 50000
zeo-client-cache-size = 5MB

# attacking zopepy:eggs make instance be built after zopepy
# in any case thx to the buildout automatic parts sort.
extra-paths = ${buildout:extra-paths}
eggs = ${buildout:eggs}
    zopelib
# security hotfixes
    Products.PloneHotfix20110720
    Products.PloneHotfix20121106


products =
    ${buildout:directory}/products
    ${productdistros:location}

zcml =
    ${buildout:zcml}

#
#with_ploneproduct_patheming
#    plone.app.theming-configure
#with_ploneproduct_patheming
#    plone.app.themingplugins-configure
#with_ploneproduct_dexterity
#    plone.app.dexterity-meta
#with_ploneproduct_dexterity
#    plone.app.dexterity-configure
#zope-conf-additional=

# plone.app.async instance if any
#zcml-additional =
#    <include package="plone.app.async" file="single_db_instance.zcml" />
environment-vars =
    zope_i18n_compile_mo_files = true
    TMPDIR = ${locations:tmp}
#    ZC_ASYNC_UUID ${buildout:directory}/var/instance-uuid.txt
#zope-conf-additional =
#    <zodb_db async>
#        cache-size ${instance:zodb-cache-size}
#        <zeoclient>
#            server ${zeoserver:zeo-address}
#            storage 2
#            name asyncstorage
#            blob-dir ${zeoserver:blob-storage}
#            shared-blob-dir on
#            var ${buildout:parts-directory}/instance/var
#            cache-size ${instance:zeo-client-cache-size}
#        </zeoclient>
#        mount-point /zasync
#    </zodb_db>
#    <product-config zc.z3monitor>
#        port 8081
#    </product-config>

# plone.app.async instance if any
#[instance-worker]
#<= instance
#http-address = ${hosts:instance-worker}:${ports:instance-worker}
#zcml-additional =
#    <include package="plone.app.async" file="single_db_worker.zcml"/>
#environment-vars =
#    zope_i18n_compile_mo_files = true
#    ZC_ASYNC_UUID ${buildout:directory}/var/worker-uuid.txt
#zope-conf-additional =
#    <zodb_db async>
#        cache-size ${instance-worker:zodb-cache-size}
#        <zeoclient>
#            server ${zeoserver:zeo-address}
#            storage 2
#            name asyncstorage
#            blob-dir ${zeoserver:blob-storage}
#            shared-blob-dir on
#            var ${buildout:parts-directory}/worker/var
#            cache-size ${instance-worker:zeo-client-cache-size}
#        </zeoclient>
#        mount-point /zasync
#    </zodb_db>
#zserver-threads = 2
#zeo-address = ${zeoserver:zeo-address}
#blob-storage = ${zeoserver:blob-storage}

[kgs]
recipe=minitage.recipe.printer
quiet=
eggs=${instance:eggs}
file=${buildout:directory}/etc/mars-kgs.cfg

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls=${groups:products-urls}
version-suffix-packages = ${groups:version-suffix-packages}
nested-packages = ${groups:nested-packages}

# eggs & scripts installation
[zopepy]
recipe = minitage.recipe.scripts
# Important for you to note the installation of the ZODB as an egg . We will not
# use the zodb code from the zope source distribution !!!!!!!
interpreter = zopepy
env-file=${buildout:directory}/etc/mars.env
eggs =
# release helpers
    zest.releaser
    jarn.mkrelease
    z3c.checkversions [buildout]
    ${instance:eggs}
# Scripts generated filtering
scripts =
#z3c.checkversions
    checkversions
#jarn.mkrelease
    mkrelease
#zest.releaser
    project_diff
    project_eggs
    project_md5
    project_release
    package_svn_prepare
    release_eggs
    zopepy
#zope2
    repozo
    zeoctl
    zeopack
    zeopasswd
#with_tool_bpython
    bpython
#with_tool_zopeskel
    paster
#with_tool_ipython
    ipython
extra-paths =
    ${instance:extra-paths}

# zope.testing testrunner support
[testenv]
INSTANCE_HOME=${instance:location}
CONFIG_FILE=${instance:location}/etc/zope.conf

# This testrunner is a zc.recipe.testrunner like
# See http://pypi.python.org/pypi/zc.recipe.testrunner/
# It can do xml reports addon if you supply -x as a command line argument
# It is useful for generating reports for hudson or other contineous integration
[mars.test]
recipe = collective.xmltestreport
eggs = ${instance:eggs}
extra-paths = ${instance:extra-paths}
defaults = ['--exit-with-status', '--auto-color', '--auto-progress']
environment = testenv
extra-paths = ${zopepy:extra-paths}

# Plone site creation if no other plonesite preset
[plonesite]
# http://pypi.python.org/pypi/collective.recipe.plonesite/
recipe = collective.recipe.plonesite
site-id = ${plone:site}
site-replace=false
enabled=true
instance = instance
# products to autoinstall
products-initial=
# profils to autorun
profiles-initial=
#   mars:default
zeoserver = zeoserver

# Plone site (re)creation
[newplonesite]
<= plonesite
site-replace=true

[get-datafs]
recipe = plone.recipe.command
update-command = ${get-datafs:command}
command =
     rsync -av --partial --progress               ${users:staging}@${hosts:staging}:${locations:staging}/backups/                ${buildout:directory}/var/backups/;
     rsync -av --partial --progress               ${users:staging}@${hosts:staging}:${locations:staging}/snapshotbackups/        ${buildout:directory}/var/snapshotbackups/;
#     rsync -av --partial --progress ${users:staging}@${hosts:staging}:${locations:staging}/blobstorage/            ${buildout:directory}/var/blobstorage/;
#     rsync -av --partial --progress  ${users:staging}@${hosts:staging}:${locations:staging}/fss_mars/  ${locations:fss}/;

[cg.devmode]
recipe=minitage.recipe.scripts
eggs=${instance:eggs}
    collective.generic.devmode
scripts=cg.devmode
mail = foo@localhost
extra-paths = ${zopepy:extra-paths}

[devmode]
recipe=minitage.recipe.scripts
scripts=cg.devmode=devmode
mail = foo@localhost
extra-paths = ${zopepy:extra-paths}
initialization=
    import sys
    sys.argv[1:] = ['-m', '${devmode:mail}', '-p', '--password', '${zope:password}', '-l', '${plone:site}', '-u', '${zope:user}']
eggs=${instance:eggs}
    collective.generic.devmode

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}
products = ${instance:products}
packages =     ./

# Command below is important
# if not, fss tests or tests using fss in their configuration will fail
[mkdirs]
recipe = plone.recipe.command
update-command = ${mkdirs:command}
command =

[chown]
# This recipe is used to set permissions -- and ownership for root mode installs
recipe = plone.recipe.command
update-command = ${chown:command}
command =
    chmod 600 .installed.cfg
    find ${buildout:directory} -type d -name var -exec chown -R ${users:zope} {} \;
    find ${buildout:eggs-directory} -type d -name LC_MESSAGES -exec chown -R ${users:zope} {} \;
    find ${buildout:eggs-directory}/Products.kupu* -type d -name i18n -exec chown -R ${users:zope} {} \;
    find ${buildout:directory} -name runzope -exec chown ${users:zope} {} \;
    find ${buildout:directory}/var -type d -exec chmod 700 {} \;
    chmod 744 ${buildout:directory}/bin/*

[backup]
recipe = collective.recipe.backup
blobbackuplocation=${locations:blob-backup}/backups
blobsnapshotlocation=${locations:blob-backup}/snapshots
keep_blob_days=${crons:nb_backups_to_keep}


[touch]
recipe = plone.recipe.command
update-command = ${touch:command}
command =
    touch ${buildout:directory}/var/log/instance1.log\;
    touch ${buildout:directory}/var/log/instance.log\;
    touch ${buildout:directory}/var/log/instance2.log\;
    touch ${buildout:directory}/var/log/instance3.log\;
    touch ${buildout:directory}/var/log/instance4.log\;
    touch ${buildout:directory}/var/log/main.log\;
    touch ${buildout:directory}/var/log/transform.log\;


[eea.test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '-v', '-s', 'eea.facetednavigation']
eggs =
    Plone
    plone.app.upgrade
    profilehooks
    eea.facetednavigation
[csv.test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '-v', '-s', 'Products.csvreplicata']
eggs =
    Plone
    plone.app.upgrade
    profilehooks
    Products.csvreplicata



# vim:set ft=cfg:
