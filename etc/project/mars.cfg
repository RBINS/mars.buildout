########################################################################################################################
# Project specific settings
########################################################################################################################


[buildout]
develop =     
        ${buildout:directory}/src.mrdeveloper/zopelib
sources-dir=${buildout:directory}/src.mrdeveloper

# extra directories oto add to the python path
extra-paths=
# better to edit ./sources.cfg
auto-checkout +=
eggs +=     
            
            
        

# auto tracked developement products
[sources]
# see http://pypi.python.org/pypi/mr.developer for documentation
# better to edit ./sources.cfg

# to integrate fancy stuff to your plone install, you can have a look to
# http://svn.plone.org/svn/plone/buildouts/plone-coredev/branches/4.0/experimental/
# where you can find sources section to grab back to your buildout (extend, or local download/edit)


[instance]
webdav-address=${hosts:instance1}:${ports:webdav}

zodb-cache-size = 50000
zeo-client-cache-size = 5MB

# attacking zopepy:eggs make instance be built after zopepy
# in any case thx to the buildout automatic parts sort.
extra-paths+=${buildout:extra-paths}
eggs += ${buildout:eggs}
#    zopelib
    Plone
# security hotfixes
    Products.PloneHotfix20110720
    Products.PloneHotfix20110928
# release helpers
    zest.releaser
    jarn.mkrelease
    z3c.checkversions [buildout]
#ZODB3 is installed as an EGG!
    ZODB3
#with_ploneproduct_contentwellportlet
    Products.ContentWellPortlets
#with_tool_ipython
    ipython
#with_ploneproduct_pz3cform
    five.grok
    plone.app.z3cform
    plone.directives.form
    plone.z3cform
#with_ploneproduct_dexterity
    z3c.blobfile
    plone.app.dexterity
#with_binding_pil
    PIL
#with_ploneproduct_tinymce
    Products.TinyMCE
#with_tool_zopeskel
    PasteScript
    ZopeSkel
#with_ploneproduct_csvreplica
    Products.csvreplicata
#with_ploneproduct_fivegrok
#with_ploneproduct_ploneappblob
    plone.app.blob
#with_tool_bpython
    bpython
# custom
    bibliograph.core           
    bibliograph.parsing        
    bibliograph.rendering      
    collective.js.datatables
    collective.uploadify
    collective.zipfiletransport
    marsapp.bibliography       
    marsapp.categories         
    marsapp.content            
    marsapp.csvreplicata            
    marsapp.helpers            
    marsapp.migration          
    marsapp.policy             
    mars.policy
    mars.skin
    mars.testing
    mars.tma
    Plomino
    plomino.tinymce 
#    Products.ATBiblioStyles
    Products.CMFBibliographyAT 
    Products.Maps
    Products.RefBiblioParser 
    eea.facetednavigation
    plone.formwidget.datetime 
    plone.app.testing
    z3c.form[test]
    zc.buildout
    zope.testing

products =
    ${buildout:directory}/products
    ${productdistros:location}

zcml +=    
    mars.policy
    mars.tma
     collective.uploadify
    collective.zipfiletransport
    collective.js.datatables
   mars.skin
    bibliograph.core           
    bibliograph.parsing        
    bibliograph.rendering      
    marsapp.bibliography       
    Products.Maps
    marsapp.categories         
    marsapp.csvreplicata         
    marsapp.content            
    marsapp.helpers            
    marsapp.migration          
    marsapp.policy             
    Products.CMFBibliographyAT 
    eea.facetednavigation-meta
    eea.facetednavigation-overrides
    eea.facetednavigation
    plone.formwidget.datetime 
            

#    
#with_ploneproduct_fivegrok
#with_ploneproduct_cz3cformgrok
#with_ploneproduct_pz3cform
#    five.grok-configure
#with_ploneproduct_ploneappblob
#    plone.app.blob-configure
#with_ploneproduct_cz3cformgrok
#with_ploneproduct_pz3cform
#    plone.app.z3cform-configure
#with_ploneproduct_dexterity
#    plone.app.dexterity-configure
#with_ploneproduct_dexterity
#    plone.app.dexterity-meta
#with_ploneproduct_csvreplica
#    Products.csvreplicata-configure
#with_ploneproduct_contentwellportlet
#    Products.ContentWellPortlets-configure
#with_ploneproduct_plominotinymce
#with_ploneproduct_tinymce
#    Products.TinyMCE-configure
#with_ploneproduct_pz3cform
#    plone.directives.form-configure
#with_ploneproduct_pz3cform
#    plone.directives.form-meta
#with_ploneproduct_cz3cformgrok
#with_ploneproduct_pz3cform
#    plone.z3cform-configure
#zope-conf-additional=

# plone.app.async instance if any
#zcml-additional =
#    <include package="plone.app.async" file="single_db_instance.zcml" />
environment-vars =
    zope_i18n_compile_mo_files = true
#    ZC_ASYNC_UUID ${buildout:directory}/var/instance-uuid.txt
#zope-conf-additional +=
#    <zodb_db async>
#        cache-size ${instance:zodb-cache-size}
#        <zeoclient>
#            server ${zeoserver:zeo-address}
#            storage 2
#            name asyncstorage
#            blob-dir ${zeoserver:blob-storage}
#            shared-blob-dir on
#            var ${buildout:parts-directory}/instance/var
#            cache-size ${instance:zeo-client-cache-size}
#        </zeoclient>
#        mount-point /zasync
#    </zodb_db>
#    <product-config zc.z3monitor>
#        port 8081
#    </product-config>

# plone.app.async instance if any
#[instance-worker]
#<= instance
#http-address = ${hosts:instance-worker}:${ports:instance-worker}
#zcml-additional =
#    <include package="plone.app.async" file="single_db_worker.zcml"/>
#    zope_i18n_compile_mo_files = true
#    ZC_ASYNC_UUID ${buildout:directory}/var/worker-uuid.txt
#zope-conf-additional =
#    <zodb_db async>
#        cache-size ${instance-worker:zodb-cache-size}
#        <zeoclient>
#            server ${zeoserver:zeo-address}
#            storage 2
#            name asyncstorage
#            blob-dir ${zeoserver:blob-storage}
#            shared-blob-dir on
#            var ${buildout:parts-directory}/worker/var
#            cache-size ${instance-worker:zeo-client-cache-size}
#        </zeoclient>
#        mount-point /zasync
#    </zodb_db>
#zserver-threads = 2
#zeo-address = ${zeoserver:zeo-address}
#blob-storage = ${zeoserver:blob-storage}


[kgs]
file=${buildout:directory}/etc/mars-kgs.cfg

[zopepy]
# Scripts generated filtering
scripts =
#z3c.checkversions
    checkversions
#jarn.mkrelease
    mkrelease
#zest.releaser
    project_diff
    project_eggs
    project_md5
    project_release
    package_svn_prepare
    release_eggs
    zopepy
#zope2
    repozo
    zeoctl
    zeopack
    zeopasswd     
#with_tool_bpython
    bpython
#with_tool_zopeskel
    paster
#with_tool_ipython
    ipython


extra-paths += ${instance:extra-paths}

# zope.testing testrunner support
[testenv]
INSTANCE_HOME=${instance:location}
CONFIG_FILE=${instance:location}/etc/zope.conf


# This testrunner is a zc.recipe.testrunner like
# See http://pypi.python.org/pypi/zc.recipe.testrunner/
# It can do xml reports addon if you supply -x as a command line argument
# It is useful for generating reports for hudson or other contineous integration
[mars.test]
recipe = collective.xmltestreport
eggs = ${instance:eggs}
extra-paths = ${instance:extra-paths}
defaults = ['--exit-with-status', '--auto-color', '--auto-progress']
environment = testenv
extra-paths = ${zopepy:extra-paths}

# Plone site creation if no other plonesite preset
[plonesite]
# http://pypi.python.org/pypi/collective.recipe.plonesite/
recipe = collective.recipe.plonesite
site-id = ${plone:site}
site-replace=false
enabled=true
instance = instance
# products to autoinstall
products-initial=
# profils to autorun
profiles-initial=
    mars.policy:default
zeoserver = zeoserver

# Plone site (re)creation
[newplonesite]
<= plonesite
site-replace=true

[get-datafs]
recipe = plone.recipe.command
update-command = ${get-datafs:command}
command =
     rsync -av --partial --progress               ${users:staging}@${hosts:staging}:${locations:staging}/backups/                ${buildout:directory}/var/backups/;
     rsync -av --partial --progress               ${users:staging}@${hosts:staging}:${locations:staging}/snapshotbackups/        ${buildout:directory}/var/snapshotbackups/;
     rsync -av --partial --progress ${users:staging}@${hosts:staging}:${locations:staging}/blobstorage/            ${buildout:directory}/var/blobstorage/;
#     rsync -av --partial --progress  ${users:staging}@${hosts:staging}:${locations:staging}/fss_mars/  ${locations:fss}/;

[cg.devmode]
recipe=minitage.recipe.scripts
eggs=${instance:eggs}
    collective.generic.devmode
scripts=cg.devmode
mail = foo@localhost
extra-paths = ${zopepy:extra-paths}

[devmode]
recipe=minitage.recipe.scripts
scripts=cg.devmode=devmode
mail = foo@localhost
extra-paths = ${zopepy:extra-paths}
initialization=
    import sys
    sys.argv[1:] = ['-m', '${devmode:mail}', '-p', '--password', '${zope:password}', '-l', '${plone:site}', '-u', '${zope:user}']
eggs=${instance:eggs}
    collective.generic.devmode

[pfd.test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '-v', '-s', 'plone.formwidget.datetime']
eggs =
    Plone
    plone.app.upgrade
    plone.formwidget.datetime[test]

# vim:set ft=cfg:
