########################################################################################################################
# Project specific settings
########################################################################################################################

[buildout]
versions = versions
develop =
find-links =
    https://dist.plone.org/release/4.3
    https://pypi.python.org/simple/ZODB4
# FOR PILWTOK
    https://download.zope.org/distribution/
# project packages
eggs=
    mars [ldap]
    Pillow
# to remove on next release
    Products.kupu
zcml= mars.policy
# eea.geotags
# deactivated as it interfers with csvreplicata
#    eea.geotags.default
#    eea.geotags.default
    eea.facetednavigation-overrides
# extra directories oto add to the python path
extra-paths=
# see http://pypi.python.org/pypi/mr.developer for documentation
sources = sources
sources-dir=${buildout:directory}/src.mrdeveloper
# auto tracked developement products, see project/sources.cfg
auto-checkout +=
# mars
    mars
    Products.csvreplicata
    Products.CMFBibliographyAT
    Products.RefBiblioParser
    bibliograph.core
    bibliograph.parsing
    bibliograph.rendering
    collective.bibliocustomviews
    collective.excelexport
    collective.externalimageeditor
    collective.js.datatables
    collective.tablepage
    collective.zipfiletransport
    plone.app.contentlisting
    plone.restapi
    rbins_masschange
    rbins.restapi


[sources]
mars= git https://github.com/RBINS/mars.git
plone.app.ldap = git https://github.com/plone/plone.app.ldap.git
bibliograph.parsing = git https://github.com/collective/bibliograph.parsing.git
bibliograph.core = git https://github.com/collective/bibliograph.core.git
bibliograph.rendering= git https://github.com/collective/bibliograph.rendering.git
collective.js.datatables = git https://github.com/collective/collective.js.datatables.git rev=77ae305
collective.bibliocustomviews = git https://github.com/RBINS/collective.bilbiocustomviews.git
collective.ckeditor = git https://github.com/collective/collective.ckeditor.git
collective.excelexport = git https://github.com/collective/collective.excelexport.git branch=default_excluded
collective.externalimageeditor = git https://github.com/collective/collective.externalimageeditor.git
collective.tablepage = git https://github.com/collective/collective.tablepage.git branch=tdesvenain
collective.js.jqueryui = git https://github.com/kiorky/collective.js.jqueryui.git
collective.zipfiletransport = git https://github.com/collective/collective.zipfiletransport.git
eea.facetednavigation = git https://github.com/collective/eea.facetednavigation.git
eea.faceted.vocabularies = git https://github.com/kiorky/eea.faceted.vocabularies.git
plone.formwidget.datetime =git https://github.com/RBINS/plone.formwidget.datetime.git
plone.restapi = git https://github.com/plone/plone.restapi.git rev=3bda8f4d65d305bca49606936ebf7fc1da709b68
Products.ATBiblioList = svn https://svn.plone.org/svn/collective/ATBiblioList/branches/bibliotopic-branch/ATBiblioList-plone4/
Products.ATBiblioStyles = svn http://svn.plone.org/svn/collective/Products.ATBiblioStyles/trunk/
Products.ATBiblioTopic = svn https://svn.plone.org/svn/collective/ATBiblioTopic/branches/plone4/
Products.CMFBibliographyAT = git https://github.com/collective/Products.CMFBibliographyAT.git rev=8bc88e5b099919f88f1a05ed714772cc17472d99
Products.ContentWellPortlets = svn https://weblion.psu.edu/svn/weblion/weblion/Products.ContentWellPortlets/trunk
Products.csvreplicata = git https://github.com/collective/Products.csvreplicata.git
Products.RefBiblioParser = git https://github.com/collective/Products.RefBiblioParser.git
rbins_masschange= git https://github.com/RBINS/rbins_masschange.git
rbins.restapi = git git@gitlab.makina-corpus.net:royal-belgian-institute-of-natural-sciences/rbins.restapi.git
plone.app.contentlisting = git git@github.com:plone/plone.app.contentlisting.git branch=1.0.x-review_state_with_no_workflow

# here is defined the Zope instance running your plone site
# beware that zopepy part must run before isntance in order to have the right version
# pinned for relstorage
[instance]
recipe = plone.recipe.zope2instance
user = ${zope:user}:${zope:password}
session-timeout-minutes = ${cache:session-timeout-minutes}
verbose-security = ${zope:verbose-security}
debug-mode = ${zope:debug-mode}
event-log-level = ${zope:event-log-level}
z2-log-level = ${zope:z2-log-level}
zodb-cache-size = 50000
zeo-client-cache-size = 5MB

# attacking zopepy:eggs make instance be built after zopepy
# in any case thx to the buildout automatic parts sort.
extra-paths = ${buildout:extra-paths}
eggs = ${buildout:eggs}

products =
    ${buildout:directory}/products
    ${productdistros:location}

zcml = ${buildout:zcml}

environment-vars =
    zope_i18n_compile_mo_files = true
    TMPDIR = ${locations:tmp}

event-log-custom =
  <logfile>
    level info
    path ${buildout:directory}/var/log/${:_buildout_section_name_}.log
    max-size 1MB
    old-files 99
  </logfile>
  <logfile>
    level error
    path ${buildout:directory}/var/log/error.log
    max-size 1MB
    old-files 99
  </logfile>

[kgs]
recipe=minitage.recipe.printer
quiet=
eggs=${instance:eggs}
file=${buildout:directory}/etc/mars-kgs.cfg

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls=
version-suffix-packages =
nested-packages =

# eggs & scripts installation
[zopepy]
recipe = zc.recipe.egg
# Important for you to note the installation of the ZODB as an egg . We will not
# use the zodb code from the zope source distribution !!!!!!!
interpreter = zopepy
env-file=${buildout:directory}/etc/mars.env
eggs =
# release helpers
    zest.releaser
    jarn.mkrelease
    z3c.checkversions [buildout]
    ${instance:eggs}
# Scripts generated filtering
scripts =
    checkversions
    mkrelease
    project_diff
    project_eggs
    project_md5
    project_release
    package_svn_prepare
    release_eggs
    zopepy
#zope2
    repozo
    zeoctl
    zeopack
    zeopasswd
extra-paths =
    ${instance:extra-paths}

# zope.testing testrunner support
[testenv]
INSTANCE_HOME=${instance:location}
CONFIG_FILE=${instance:location}/etc/zope.conf

# This testrunner is a zc.recipe.testrunner like
# See http://pypi.python.org/pypi/zc.recipe.testrunner/
# It can do xml reports addon if you supply -x as a command line argument
# It is useful for generating reports for hudson or other contineous integration
[mars.test]
recipe = collective.xmltestreport
eggs = ${instance:eggs}
extra-paths = ${instance:extra-paths}
defaults = ['--exit-with-status', '--auto-color', '--auto-progress']
environment = testenv
extra-paths = ${zopepy:extra-paths}

[get-datafs]
recipe = plone.recipe.command
update-command = ${get-datafs:command}
command =
     rsync -av --partial --progress               ${users:staging}@${hosts:staging}:${locations:staging}/backups/                ${buildout:directory}/var/backups/;
     rsync -av --partial --progress               ${users:staging}@${hosts:staging}:${locations:staging}/snapshotbackups/        ${buildout:directory}/var/snapshotbackups/;
#     rsync -av --partial --progress ${users:staging}@${hosts:staging}:${locations:staging}/blobstorage/            ${buildout:directory}/var/blobstorage/;
#     rsync -av --partial --progress  ${users:staging}@${hosts:staging}:${locations:staging}/fss_mars/  ${locations:fss}/;

[cg.devmode]
recipe=zc.recipe.egg
eggs=${instance:eggs}
    collective.generic.devmode
scripts=cg.devmode
mail = foo@localhost
extra-paths = ${zopepy:extra-paths}

[devmode]
recipe=zc.recipe.egg
scripts=cg.devmode=devmode
mail = foo@localhost
extra-paths = ${zopepy:extra-paths}
initialization=
    import sys
    sys.argv[1:] = ['-m', '${devmode:mail}', '-p', '--password', '${zope:password}', '-l', '${plone:site}', '-u', '${zope:user}']
eggs=${instance:eggs}
    collective.generic.devmode

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}
products = ${instance:products}
packages =     ./


[chown]
# This recipe is used to set permissions -- and ownership for root mode installs
recipe = plone.recipe.command
update-command = ${chown:command}
command =
    chmod 600 .installed.cfg
# doing this at each buildout is very long
#    find ${buildout:eggs-directory} -type d -name LC_MESSAGES -exec chown -R ${users:zope} {} \;
    find ${buildout:directory}/parts -name runzope -exec chown ${users:zope} {} \;
    chmod 744 ${buildout:directory}/bin/*

[backup]
recipe = collective.recipe.backup
blobbackuplocation=${locations:blob-backup}/backups
blobsnapshotlocation=${locations:blob-backup}/snapshots
keep=${crons:nb_backups_to_keep}
additional_filestorages =
    entomo ${buildout:directory}/var/filestorage/Data.entomo.fs ${zeoserver-entomo:blob-storage}
    geology ${buildout:directory}/var/filestorage/Data.geology.fs ${zeoserver-geology:blob-storage}
    invertebrates ${buildout:directory}/var/filestorage/Data.invertebrates.fs ${zeoserver-invertebrates:blob-storage}
    vertebrates ${buildout:directory}/var/filestorage/Data.vertebrates.fs ${zeoserver-vertebrates:blob-storage}
    paleontology ${buildout:directory}/var/filestorage/Data.paleontology.fs ${zeoserver-paleontology:blob-storage}
    anthropology ${buildout:directory}/var/filestorage/Data.anthropology.fs ${zeoserver-anthropology:blob-storage}
    projects ${buildout:directory}/var/filestorage/Data.projects.fs ${zeoserver-projects:blob-storage}
    cpb ${buildout:directory}/var/filestorage/Data.cpb.fs ${zeoserver-cpb:blob-storage}


[touch]
recipe = plone.recipe.command
update-command = ${touch:command}
command =
    touch ${buildout:directory}/var/log/instance1.log\;
    touch ${buildout:directory}/var/log/main.log\;
    touch ${buildout:directory}/var/log/transform.log\;

[eea.test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '-v', '-s', 'eea.facetednavigation']
eggs =
    Plone
    plone.app.upgrade
    profilehooks
    eea.facetednavigation
[csv.test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '-v', '-s', 'Products.csvreplicata']
eggs =
    Plone
    plone.app.upgrade
    profilehooks
    Products.csvreplicata

[instance1]
<= instance
zeo-address = ${zeoserver:zeo-address}
http-address = ${hosts:instance1}:${ports:instance1}

[instance1-entomo]
<= instance
http-address = ${hosts:instance1-entomo}:${ports:instance1-entomo}
zeo-address = ${zeoserver-entomo:zeo-address}
temporary-storage =
    <zeoclient>
    server ${zeoserver-entomo:zeo-address}
        storage temp
        name zeostorage-entomo
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

[instance1-geology]
<= instance
http-address = ${hosts:instance1-geology}:${ports:instance1-geology}
zeo-address = ${zeoserver-geology:zeo-address}
temporary-storage =
    <zeoclient>
    server ${zeoserver-geology:zeo-address}
        storage temp
        name zeostorage-geology
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

[instance1-invertebrates]
<= instance
http-address = ${hosts:instance1-invertebrates}:${ports:instance1-invertebrates}
zeo-address = ${zeoserver-invertebrates:zeo-address}
temporary-storage =
    <zeoclient>
    server ${zeoserver-invertebrates:zeo-address}
        storage temp
        name zeostorage-invertebrates
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

[instance1-vertebrates]
<= instance
http-address = ${hosts:instance1-vertebrates}:${ports:instance1-vertebrates}
zeo-address = ${zeoserver-vertebrates:zeo-address}
temporary-storage =
    <zeoclient>
    server ${zeoserver-vertebrates:zeo-address}
        storage temp
        name zeostorage-vertebrates
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

[instance1-paleontology]
<= instance
http-address = ${hosts:instance1-paleontology}:${ports:instance1-paleontology}
zeo-address = ${zeoserver-paleontology:zeo-address}
temporary-storage =
    <zeoclient>
    server ${zeoserver-paleontology:zeo-address}
        storage temp
        name zeostorage-paleontology
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

[instance1-anthropology]
<= instance
http-address = ${hosts:instance1-anthropology}:${ports:instance1-anthropology}
zeo-address = ${zeoserver-anthropology:zeo-address}
temporary-storage =
    <zeoclient>
    server ${zeoserver-anthropology:zeo-address}
        storage temp
        name zeostorage-anthropology
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

[instance1-projects]
<= instance
http-address = ${hosts:instance1-projects}:${ports:instance1-projects}
zeo-address = ${zeoserver-projects:zeo-address}
temporary-storage =
    <zeoclient>
    server ${zeoserver-projects:zeo-address}
        storage temp
        name zeostorage-projects
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

[instance1-cpb]
<= instance
http-address = ${hosts:instance1-cpb}:${ports:instance1-cpb}
zeo-address = ${zeoserver-cpb:zeo-address}
temporary-storage =
    <zeoclient>
    server ${zeoserver-cpb:zeo-address}
        storage temp
        name zeostorage-cpb
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

[i18ndude]
recipe=zc.recipe.egg
eggs=i18ndude
scripts=i18ndude


